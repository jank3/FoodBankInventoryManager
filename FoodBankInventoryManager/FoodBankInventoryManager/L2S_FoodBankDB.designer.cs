#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FoodBankInventoryManager
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="FoodBankDB")]
	public partial class L2S_FoodBankDBDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertBin(Bin instance);
    partial void UpdateBin(Bin instance);
    partial void DeleteBin(Bin instance);
    partial void InsertFood(Food instance);
    partial void UpdateFood(Food instance);
    partial void DeleteFood(Food instance);
    partial void InsertShelf(Shelf instance);
    partial void UpdateShelf(Shelf instance);
    partial void DeleteShelf(Shelf instance);
    partial void InsertInvBin(InvBin instance);
    partial void UpdateInvBin(InvBin instance);
    partial void DeleteInvBin(InvBin instance);
    #endregion
		
		public L2S_FoodBankDBDataContext() : 
				base(global::FoodBankInventoryManager.Properties.Settings.Default.FoodBankDBConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public L2S_FoodBankDBDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public L2S_FoodBankDBDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public L2S_FoodBankDBDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public L2S_FoodBankDBDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Bin> Bins
		{
			get
			{
				return this.GetTable<Bin>();
			}
		}
		
		public System.Data.Linq.Table<Food> Foods
		{
			get
			{
				return this.GetTable<Food>();
			}
		}
		
		public System.Data.Linq.Table<Shelf> Shelfs
		{
			get
			{
				return this.GetTable<Shelf>();
			}
		}
		
		public System.Data.Linq.Table<InvBin> InvBins
		{
			get
			{
				return this.GetTable<InvBin>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Bin")]
	public partial class Bin : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BinCode;
		
		private EntitySet<InvBin> _InvBins;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBinCodeChanging(int value);
    partial void OnBinCodeChanged();
    #endregion
		
		public Bin()
		{
			this._InvBins = new EntitySet<InvBin>(new Action<InvBin>(this.attach_InvBins), new Action<InvBin>(this.detach_InvBins));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BinCode", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int BinCode
		{
			get
			{
				return this._BinCode;
			}
			set
			{
				if ((this._BinCode != value))
				{
					this.OnBinCodeChanging(value);
					this.SendPropertyChanging();
					this._BinCode = value;
					this.SendPropertyChanged("BinCode");
					this.OnBinCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Bin_InvBin", Storage="_InvBins", ThisKey="BinCode", OtherKey="BinCode")]
		public EntitySet<InvBin> InvBins
		{
			get
			{
				return this._InvBins;
			}
			set
			{
				this._InvBins.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_InvBins(InvBin entity)
		{
			this.SendPropertyChanging();
			entity.Bin = this;
		}
		
		private void detach_InvBins(InvBin entity)
		{
			this.SendPropertyChanging();
			entity.Bin = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Food")]
	public partial class Food : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _FoodCode;
		
		private decimal _PricePerItem;
		
		private int _MinimumQuantity;
		
		private EntitySet<InvBin> _InvBins;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFoodCodeChanging(string value);
    partial void OnFoodCodeChanged();
    partial void OnPricePerItemChanging(decimal value);
    partial void OnPricePerItemChanged();
    partial void OnMinimumQuantityChanging(int value);
    partial void OnMinimumQuantityChanged();
    #endregion
		
		public Food()
		{
			this._InvBins = new EntitySet<InvBin>(new Action<InvBin>(this.attach_InvBins), new Action<InvBin>(this.detach_InvBins));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FoodCode", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string FoodCode
		{
			get
			{
				return this._FoodCode;
			}
			set
			{
				if ((this._FoodCode != value))
				{
					this.OnFoodCodeChanging(value);
					this.SendPropertyChanging();
					this._FoodCode = value;
					this.SendPropertyChanged("FoodCode");
					this.OnFoodCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PricePerItem", DbType="Money NOT NULL")]
		public decimal PricePerItem
		{
			get
			{
				return this._PricePerItem;
			}
			set
			{
				if ((this._PricePerItem != value))
				{
					this.OnPricePerItemChanging(value);
					this.SendPropertyChanging();
					this._PricePerItem = value;
					this.SendPropertyChanged("PricePerItem");
					this.OnPricePerItemChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MinimumQuantity", DbType="Int NOT NULL")]
		public int MinimumQuantity
		{
			get
			{
				return this._MinimumQuantity;
			}
			set
			{
				if ((this._MinimumQuantity != value))
				{
					this.OnMinimumQuantityChanging(value);
					this.SendPropertyChanging();
					this._MinimumQuantity = value;
					this.SendPropertyChanged("MinimumQuantity");
					this.OnMinimumQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Food_InvBin", Storage="_InvBins", ThisKey="FoodCode", OtherKey="FoodCode")]
		public EntitySet<InvBin> InvBins
		{
			get
			{
				return this._InvBins;
			}
			set
			{
				this._InvBins.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_InvBins(InvBin entity)
		{
			this.SendPropertyChanging();
			entity.Food = this;
		}
		
		private void detach_InvBins(InvBin entity)
		{
			this.SendPropertyChanging();
			entity.Food = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Shelf")]
	public partial class Shelf : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ShelfCode;
		
		private EntitySet<InvBin> _InvBins;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnShelfCodeChanging(int value);
    partial void OnShelfCodeChanged();
    #endregion
		
		public Shelf()
		{
			this._InvBins = new EntitySet<InvBin>(new Action<InvBin>(this.attach_InvBins), new Action<InvBin>(this.detach_InvBins));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShelfCode", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ShelfCode
		{
			get
			{
				return this._ShelfCode;
			}
			set
			{
				if ((this._ShelfCode != value))
				{
					this.OnShelfCodeChanging(value);
					this.SendPropertyChanging();
					this._ShelfCode = value;
					this.SendPropertyChanged("ShelfCode");
					this.OnShelfCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Shelf_InvBin", Storage="_InvBins", ThisKey="ShelfCode", OtherKey="ShelfCode")]
		public EntitySet<InvBin> InvBins
		{
			get
			{
				return this._InvBins;
			}
			set
			{
				this._InvBins.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_InvBins(InvBin entity)
		{
			this.SendPropertyChanging();
			entity.Shelf = this;
		}
		
		private void detach_InvBins(InvBin entity)
		{
			this.SendPropertyChanging();
			entity.Shelf = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.InvBin")]
	public partial class InvBin : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BinCode;
		
		private int _ShelfCode;
		
		private string _FoodCode;
		
		private System.DateTime _DateEntered;
		
		private int _Quantity;
		
		private EntityRef<Bin> _Bin;
		
		private EntityRef<Food> _Food;
		
		private EntityRef<Shelf> _Shelf;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBinCodeChanging(int value);
    partial void OnBinCodeChanged();
    partial void OnShelfCodeChanging(int value);
    partial void OnShelfCodeChanged();
    partial void OnFoodCodeChanging(string value);
    partial void OnFoodCodeChanged();
    partial void OnDateEnteredChanging(System.DateTime value);
    partial void OnDateEnteredChanged();
    partial void OnQuantityChanging(int value);
    partial void OnQuantityChanged();
    #endregion
		
		public InvBin()
		{
			this._Bin = default(EntityRef<Bin>);
			this._Food = default(EntityRef<Food>);
			this._Shelf = default(EntityRef<Shelf>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BinCode", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int BinCode
		{
			get
			{
				return this._BinCode;
			}
			set
			{
				if ((this._BinCode != value))
				{
					if (this._Bin.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBinCodeChanging(value);
					this.SendPropertyChanging();
					this._BinCode = value;
					this.SendPropertyChanged("BinCode");
					this.OnBinCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShelfCode", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ShelfCode
		{
			get
			{
				return this._ShelfCode;
			}
			set
			{
				if ((this._ShelfCode != value))
				{
					if (this._Shelf.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnShelfCodeChanging(value);
					this.SendPropertyChanging();
					this._ShelfCode = value;
					this.SendPropertyChanged("ShelfCode");
					this.OnShelfCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FoodCode", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string FoodCode
		{
			get
			{
				return this._FoodCode;
			}
			set
			{
				if ((this._FoodCode != value))
				{
					if (this._Food.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFoodCodeChanging(value);
					this.SendPropertyChanging();
					this._FoodCode = value;
					this.SendPropertyChanged("FoodCode");
					this.OnFoodCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateEntered", DbType="Date NOT NULL")]
		public System.DateTime DateEntered
		{
			get
			{
				return this._DateEntered;
			}
			set
			{
				if ((this._DateEntered != value))
				{
					this.OnDateEnteredChanging(value);
					this.SendPropertyChanging();
					this._DateEntered = value;
					this.SendPropertyChanged("DateEntered");
					this.OnDateEnteredChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Int NOT NULL")]
		public int Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Bin_InvBin", Storage="_Bin", ThisKey="BinCode", OtherKey="BinCode", IsForeignKey=true)]
		public Bin Bin
		{
			get
			{
				return this._Bin.Entity;
			}
			set
			{
				Bin previousValue = this._Bin.Entity;
				if (((previousValue != value) 
							|| (this._Bin.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Bin.Entity = null;
						previousValue.InvBins.Remove(this);
					}
					this._Bin.Entity = value;
					if ((value != null))
					{
						value.InvBins.Add(this);
						this._BinCode = value.BinCode;
					}
					else
					{
						this._BinCode = default(int);
					}
					this.SendPropertyChanged("Bin");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Food_InvBin", Storage="_Food", ThisKey="FoodCode", OtherKey="FoodCode", IsForeignKey=true)]
		public Food Food
		{
			get
			{
				return this._Food.Entity;
			}
			set
			{
				Food previousValue = this._Food.Entity;
				if (((previousValue != value) 
							|| (this._Food.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Food.Entity = null;
						previousValue.InvBins.Remove(this);
					}
					this._Food.Entity = value;
					if ((value != null))
					{
						value.InvBins.Add(this);
						this._FoodCode = value.FoodCode;
					}
					else
					{
						this._FoodCode = default(string);
					}
					this.SendPropertyChanged("Food");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Shelf_InvBin", Storage="_Shelf", ThisKey="ShelfCode", OtherKey="ShelfCode", IsForeignKey=true)]
		public Shelf Shelf
		{
			get
			{
				return this._Shelf.Entity;
			}
			set
			{
				Shelf previousValue = this._Shelf.Entity;
				if (((previousValue != value) 
							|| (this._Shelf.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Shelf.Entity = null;
						previousValue.InvBins.Remove(this);
					}
					this._Shelf.Entity = value;
					if ((value != null))
					{
						value.InvBins.Add(this);
						this._ShelfCode = value.ShelfCode;
					}
					else
					{
						this._ShelfCode = default(int);
					}
					this.SendPropertyChanged("Shelf");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
